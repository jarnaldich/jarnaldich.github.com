<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>My Awesome Blog: Posts tagged 'factor'</title>
  <description>My Awesome Blog: Posts tagged 'factor'</description>
  <link>http://www.example.com/tags/factor.html</link>
  <lastBuildDate>Sun, 24 Feb 2013 00:00:00 CEST</lastBuildDate>
  <pubDate>Sun, 24 Feb 2013 00:00:00 CEST</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Raw Strings in Factor </title>
   <link>http://www.example.com/blog/2013/02/24/raw-strings-in-factor/?utm_source=factor&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2013-02-24-raw-strings-in-factor</guid>
   <pubDate>Sun, 24 Feb 2013 00:00:00 CEST</pubDate>
   <description>
&lt;html&gt;&lt;img src="http://www.example.com/img/1x1.gif?utm_source=factor&amp;amp;utm_medium=RSS&amp;amp;utm_campaign=%2Fblog%2F2013%2F02%2F24%2Fraw-strings-in-factor%2F" height="1" width="1" /&gt;
 &lt;p&gt;Ok, you may think I have a fixation with &lt;a href="blog/2011/08/07/raw-strings-in-racket/"&gt;raw strings&lt;/a&gt;, but if you&amp;rsquo;re like most developers and have used different languages through the years, you probably know the feeling of wanting to port your favourite features from language to language.&lt;/p&gt;
 &lt;p&gt;Most languages just won&amp;rsquo;t let you do anything about it, but then, happily, there is also a whole family of &lt;em&gt;programmable programming languages&lt;/em&gt;: &lt;a href="http://www.paulgraham.com/chameleon.html"&gt;Lisps&lt;/a&gt; being the most notable members among them.&lt;/p&gt;
 &lt;p&gt;But there are, for sure, other languages in other sometimes forgotten paradigms.&lt;/p&gt;
 &lt;h2 id="Concatenative"&gt;Concatenative&lt;/h2&gt;
 &lt;p&gt;&lt;a href="http://factorcode.org"&gt;Factor&lt;/a&gt; is a so-called &lt;a href="http://concatenative.org/wiki/view/Concatenative%20language"&gt;concatenative&lt;/a&gt; language. More precisely, it a &lt;a href="http://c2.com/cgi/wiki?StackBasedLanguage"&gt;stack-based one&lt;/a&gt;. What sets it apart from other concatenative languages IMHO is that it&amp;rsquo;s a &lt;em&gt;general purpose&lt;/em&gt; (Forth is more oriented towards embedded systems) &lt;em&gt;practical&lt;/em&gt; (not just a theoretical tool) and &lt;em&gt;modern&lt;/em&gt;: its creator Slava Pestov and the development team have brilliantly shown how object orientation, incremental compilation, and bunch of advanced language features can be put to work in a concatenative language.&lt;/p&gt;
 &lt;h2 id="Factor as a shell"&gt;Factor as a shell&lt;/h2&gt;
 &lt;p&gt;Factor has a very terse syntax. This can be good or bad, depending on your application and the way your brain is wired up. Lately, I&amp;rsquo;ve started using its &lt;a href="http://re-factor.blogspot.com.es/2010/09/visual-repl.html"&gt;visual repl&lt;/a&gt; as an os shell on steroids (I&amp;rsquo;ll eventually blog on the experience). I think it makes sense since I spend a good share of my time on Windows and I&amp;rsquo;m not crazy about the syntax of Powershell. A shell is clearly one of the applications where less typing is just the right thing, and the stack-based model sometimes feels like a natural upgrade of unix piping (I&amp;rsquo;m thinking of the &lt;a href="http://docs.factorcode.org/content/article-dataflow-combinators.html"&gt;dataflow combinators&lt;/a&gt; here).&lt;/p&gt;
 &lt;h2 id="Raw strings"&gt;Raw strings&lt;/h2&gt;
 &lt;p&gt;And, of course, being able to shamelessly use backslashes inside strings is something you ask of a windows shell. I want to be able to type something like:&lt;/p&gt;
 &lt;pre class="brush: factor"&gt;r| \\Server\share| directory-files&lt;/pre&gt;
 &lt;p&gt; Notice the space after the first vertical bar. This is typical of Factor, you&amp;rsquo;ll see why in a moment.&lt;/p&gt;
 &lt;p&gt;As a Factor newbie, there are two things you can do. One is to RTFM, which is extensive and well-written:&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;  The Factor parser follows a simple recursive-descent design. The parser reads successive tokens from the input; if the token identifies a number or an ordinary word, it is added to an accumulator vector. Otherwise if the token identifies a parsing word, the parsing word is executed immediately.&lt;/p&gt;&lt;/blockquote&gt;
 &lt;p&gt;The other one is to check the implementation of something close to what&amp;rsquo;s intended. This is extremely easy in Factor, since most of the Factor libraries are implemented in Factor itself and the help system lets you navigate through the definitions. The solution presented here is inspired by the regex-introducing parsing word &lt;a href="http://docs.factorcode.org/content/word-R__slash__,regexp.html"&gt;&lt;code&gt;R/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
 &lt;p&gt;So it looks like we&amp;rsquo;ll need to introduce a word that will hook up to a function whose responsibility will be to push a string into the accumulator. Something like:&lt;/p&gt;
 &lt;pre class="brush: factor"&gt;SYNTAX: r| CHAR: | parsing-raw ;&lt;/pre&gt;
 &lt;p&gt; This means that the parser will immediately evaluate &lt;code&gt;124 parsing-raw&lt;/code&gt; after seeing the introductory &lt;code&gt;r|&lt;/code&gt;. since this introductory word is handled by the default lexer and parser, there needs to be a space after it for Factor to process the end of word. This might seem unnatural if you do not know Factor, but it is consistent with the rest of the language.&lt;/p&gt;
 &lt;p&gt;124 is the ascii code for the vertical bar, which will act as a terminator of the string to parse. Passing the terminator as a parameter will make things easier if we decide to change the separators someday.&lt;/p&gt;
 &lt;h2 id="The lexer"&gt;The lexer&lt;/h2&gt;
 &lt;p&gt;For our purpose, we cannot work at the parser level: we don&amp;rsquo;t deal with words, numbers or already-constructed strings. If we want to construct a Factor string in a different way, we&amp;rsquo;ll have to call the lexer directly. The lexer is stored in a &lt;a href="http://docs.factorcode.org/content/article-namespaces.html"&gt;dynamic variable&lt;/a&gt; named &lt;code&gt;lexer&lt;/code&gt;.&lt;/p&gt;
 &lt;pre class="brush: factor"&gt;: parsing-raw ( accum end -- accum )
        lexer get take-until suffix! ;&lt;/pre&gt;
 &lt;p&gt; &lt;code&gt;parsing raw&lt;/code&gt; is reponsible for taking input until the &lt;code&gt;end&lt;/code&gt; character (124) is reached, and then suffixing the accumulator with the newly parsed string.&lt;/p&gt;
 &lt;p&gt;The actual parsing is done in the &lt;code&gt;take-until&lt;/code&gt; word:&lt;/p&gt;
 &lt;pre class="brush: factor"&gt;: take-until ( end lexer -- string )
        [
                [ 1 + ] dip
                [ index-from ] 2keep
                [ swapd subseq ]
                [ 2drop 1 + ] 3bi
        ] change-lexer-column ;&lt;/pre&gt;
 &lt;p&gt; The word &lt;code&gt;change-lexer-column&lt;/code&gt; calls its quotation with the column and the line text of the lexer at that moment. The first line, then, just skips that blank we talked earlier following the introductory word &lt;code&gt;r|&lt;/code&gt;. The next two lines find the positon of the terminator (&lt;code&gt;index-from&lt;/code&gt;) and extract the string accordingly (&lt;code&gt;subseq&lt;/code&gt;). At the end of the quotation &lt;code&gt;change-lexer-column&lt;/code&gt; finds the new lexer column at the top of the stack, and just below it lies our return value: the raw string.&lt;/p&gt;
 &lt;p&gt;Let&amp;rsquo;s give it a try:&lt;/p&gt;
 &lt;pre class="brush: factor"&gt;IN: scratchpad r| \\Server\share|

--- Data stack:
"\\\\Server\\share"
IN: scratchpad &lt;/pre&gt;
 &lt;h2 id="Conclusion"&gt;Conclusion&lt;/h2&gt;
 &lt;p&gt;Extending Factor&amp;rsquo;s syntax is quite straightforward. The linked documentation system and source code browser are an extremely helpful resource to learn the language.&lt;/p&gt;
 &lt;p&gt;As pointed out after a question in the &lt;a href="http://dir.gmane.org/gmane.comp.lang.factor.general"&gt;mailing list&lt;/a&gt;, my solution lacks a way to escape characters. Check out the reference at the end of the article to see how Factor&amp;rsquo;s &amp;ldquo;real&amp;rdquo; string parser deals with them.&lt;/p&gt;
 &lt;h2 id="Resources"&gt;Resources&lt;/h2&gt;
 &lt;ul&gt;
  &lt;li&gt;Slava&amp;rsquo;s post on &lt;a href="http://factor-language.blogspot.com.es/2009/09/survey-of-domain-specific-languages-in.html"&gt;writing DSLs on Factor&lt;/a&gt; gives a nice overview of Factor&amp;rsquo;s self-modifying capabilities.&lt;/li&gt;
  &lt;li&gt;The &lt;a href="http://docs.factorcode.org/content/article-parsing-words.html"&gt;docs&lt;/a&gt; of course.&lt;/li&gt;
  &lt;li&gt;The &lt;a href="https://github.com/slavapestov/factor/blob/master/core/strings/parser/parser.factor"&gt;string parser code&lt;/a&gt;, to see how &amp;ldquo;real&amp;rdquo; Factor strings are parsed. Interesting to see how Factor deals with escape characters. &lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description></item></channel></rss>